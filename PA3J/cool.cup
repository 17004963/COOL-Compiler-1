/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;

   /* My definitions */
nonterminal Features features;
nonterminal Features attr;
nonterminal Features method;
nonterminal Formals dummy_formal_list;
nonterminal Formals formals;
nonterminal Formal formal;
nonterminal Expression expr;
nonterminal Expression let_expr;
nonterminal Expressions rep_exprs;
nonterminal Expressions exprs;
nonterminal Expressions exprs_semi;
nonterminal Case_ branch;
nonterminal Cases cases;


/* Precedence declarations go here. */
precedence left ASSIGN;
precedence left NOT;
precedence left LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;


program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */

dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	;

/* Formal and Formals */
formal
        ::= OBJECTID:a1 COLON TYPEID:a2
            {: RESULT = new formalc(curr_lineno(), a1, a2); :}
        ;
formals 
        ::= formal:a1
            {: RESULT = new Formals(curr_lineno()).appendElement(a1); :}
        | formals:a1 formal:a2
            {: RESULT = a1.appendElement(a2); :}
        ;
/* Expression */

expr   
        ::= OBJECTID:a1 ASSIGN expr:a2
            {: RESULT = new assign(curr_lineno(), a1, a2); :}
        /* Dispatch  */
        | expr:a1 DOT OBJECTID:a2 LPAREN rep_exprs:a3 RPAREN
            {: RESULT = new dispatch(curr_lineno(), a1, a2, a3); :}
        | expr:a1 AT TYPEID:a2 DOT OBJECTID:a3 LPAREN rep_exprs:a4 RPAREN
            {: RESULT = new static_dispatch(curr_lineno(), a1, a2, a3, a4); :}
        | OBJECTID:a1 LPAREN rep_exprs:a2 RPAREN
            {: AbstractSymbol self = AbstractTable.idtable.addString("self");
               RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), self), a1, a2); :}
        /* if else then */
        | IF expr:a1 THEN expr:a2 ELSE expr:a3 FI
            {: RESULT = new cond(curr_lineno(), a1, a2, a3); :}
        /* while loop pool */
        | WHILE expr:a1 LOOP expr:a2 POOL
            {: RESULT = new loop(curr_lineno(), a1, a2); :}
        /* block */
        | LBRACE exprs_semi:a1 RBRACE
            {: RESULT = new block(curr_lineno(), a1); :}
        /* let in */
        | LET let_expr:a1
            {: RESULT = a1; :}
     

        ;


let_expr
        ::= OBJECTID:a1 COLON TYPEID:a2 IN expr:a4
            {: RESULT = new let(curr_lineno(), a1, a2, new no_expr(curr_lineno()), a4); :}
        | OBJECTID:a1 COLON TYPEID:a2 COMMA let_expr:a4
            {: RESULT = new let(curr_lineno(), a1, a2, new no_expr(curr_lineno()), a4); :}
        | OBJECTID:a1 COLON TYPEID:a2 ASSIGN expr:a3 IN expr:a4
            {: RESULT = new let(curr_lineno(), a1, a2, a3, a4); :}
        | OBJECTID:a1 COLON TYPEID:a2 ASSIGN expr:a3 COMMA let_expr:a4
            {: RESULT = new let(curr_lineno(), a1, a2, a3, a4); :}
        ;
         
exprs_semi
        ::= expr:a1 SEMI
            {: RESULT = new Expressions(curr_lineno()).appendElement(a1); :}
        | exprs_semi:a1 expr:a2 SEMI
            {: RESULT = a1.appendElement(a2); :}
        ;

rep_exprs
        ::= expr:a1
            {: RESULT = new Expressions(curr_lineno()).appendElement(a1); :}
        | rep_exprs:a1 COMMA expr:a2
            {: RESULT = a1.appendElement(a2); :}
        ;






